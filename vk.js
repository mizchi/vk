// Generated by CoffeeScript 1.7.1
(function() {
  var Node, React, buildTags, vk, _ref;

  React = (_ref = typeof require === "function" ? require('react') : void 0) != null ? _ref : React;

  vk = function() {
    return vk.compile.apply(vk, arguments);
  };

  vk.ctx = null;

  vk.dom = {};

  buildTags = function() {
    var createTagFunc, isObject, parseOption, tags;
    tags = Object.keys(React.DOM);
    isObject = function(obj) {
      return (obj instanceof Object) && (Object.getPrototypeOf(obj) === Object.prototype);
    };
    parseOption = function(a1, a2) {
      var block, opts, text;
      opts = {};
      block = function() {};
      text = null;
      switch (arguments.length) {
        case 0:
          'pass';
          break;
        case 1:
          if (a1 instanceof Function) {
            block = a1;
          } else if ((typeof a1) === 'string') {
            text = a1;
          } else if (isObject(a1)) {
            opts = a1;
          }
          break;
        case 2:
          opts = a1;
          if (a2 instanceof Function) {
            block = a2;
          } else {
            text = a2;
          }
      }
      return {
        text: text,
        block: block,
        opts: opts
      };
    };
    createTagFunc = function(name) {
      return function() {
        var block, n, opts, orig, text, _ref1;
        _ref1 = parseOption.apply(null, arguments), text = _ref1.text, block = _ref1.block, opts = _ref1.opts;
        orig = vk.ctx;
        n = new Node(name, opts, text);
        vk.ctx.push(n);
        vk.ctx = n;
        block();
        return vk.ctx = orig;
      };
    };
    return tags.forEach(function(tag) {
      return vk.dom[tag] = createTagFunc(tag);
    });
  };

  buildTags();

  Node = (function() {
    function Node(tag, opts, text) {
      this.tag = tag;
      this.opts = opts;
      this.text = text;
      this.children = [];
    }

    Node.prototype.push = function(item) {
      return this.children.push(item);
    };

    return Node;

  })();

  vk.render = function(block) {
    var root;
    if (block instanceof Function) {
      root = vk.ctx = new Node('div', {});
      block(vk.dom);
    } else if ((typeof block) === 'string') {
      root = vk.ctx = new Node('div', block);
    }
    return root;
  };

  vk.convert = function(_arg) {
    var children, opts, tag, text;
    tag = _arg.tag, opts = _arg.opts, children = _arg.children, text = _arg.text;
    if (text) {
      return React.DOM[tag](opts, text);
    } else {
      return React.DOM[tag](opts, children.map(function(child) {
        return vk.convert(child);
      }));
    }
  };

  vk.compile = function(block) {
    var node;
    node = vk.render(block);
    return vk.convert(node);
  };

  if (module.exports != null) {
    module.exports = vk;
  } else {
    window.vk = vk;
  }

}).call(this);
